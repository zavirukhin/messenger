image: node:20-alpine

.unpack-client:
  before_script:
    - rm -r server || true
    - cp -a client/. .
    - rm -r client

workflow:
  rules:
    - when: always

cache:
  - key: &global_cache_node_mods
      files:
        - package-lock.json
    paths:
      - node_modules/
    policy: pull

stages:
  - install
  - build
  - lint
  - test
  - deploy

install:
  stage: .pre
  cache:
    - key:
        files:
          - package-lock.json
      paths:
        - node_modules/
      when: on_success
      policy: pull-push # update the cache

    # store npm cache for all branches (stores download pkg.tar.gz's)
    # will not be necessary for any other job because we don't install at every step
    - key: ${CI_JOB_NAME}
      # must be inside $CI_PROJECT_DIR for gitlab-runner caching (#3)
      paths:
        - .npm/
      when: on_success
      policy: pull-push
  script:
    # Change the cache directory so it's in $CI_PROJECT_DIR instead of ~/.npm
    # Make sure you use the --production parameter or set your NODE_ENV to
    # `production` if you don't want the devDependencies to be installed
    - npm ci --cache .npm --prefer-offline
  only:
    changes:
      - package-lock.json
    refs:
      - merge_requests
      - main
      - develop

build:
  stage: build
  extends: .unpack-client
  script:
    - if ! [ -d node_modules ]; then npm ci --cache .npm --prefer-offline; fi
    - npx nx build
  artifacts:
    paths:
      - dist/social/

lint:
  stage: lint
  extends: .unpack-client
  script:
    - if ! [ -d node_modules ]; then npm ci --cache .npm --prefer-offline; fi
    - npx nx run-many -t lint

test:
  stage: test
  extends: .unpack-client
  script:
    - if ! [ -d node_modules ]; then npm ci --cache .npm --prefer-offline; fi
    - npx nx run-many -t test

pages:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  script:
    - mkdir public
    - mv dist/social/* public
  only:
    - main
    - master
  artifacts:
    paths:
      - public